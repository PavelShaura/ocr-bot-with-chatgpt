import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery

from ocrbot.config import redis_client
from ocrbot.db.pg_manager import pg_manager
from ocrbot.keyboards.inline.user_kbd.action_after_image_loading import (
    action_after_loading_keyboard,
)
from ocrbot.services.extracting_text import extract_text
from ocrbot.keyboards.inline.user_kbd.choose_lang import all_languages

send_text_router: Router = Router()


@send_text_router.callback_query(
    F.data.in_(all_languages), flags={"throttling_key": "callback"}
)
async def handle_callback(query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.

    :param query: –ö–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å.
    :type query: aiogram.types.CallbackQuery
    """
    user_id = query.from_user.id
    language = query.data
    file_path = await redis_client.get_file_path(user_id)
    if file_path:
        await query.message.edit_text(
            "‚úÇÔ∏è  –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ . . ."
        )
        try:
            extracted_text = await extract_text(file_path, language)
        except Exception as e:
            await query.message.edit_text(
                text=f"<i>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏. \n"
                "–í–æ–∑–º–æ–∂–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∏–ª–∏ –Ω–∞ –Ω–µ–π –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ . . .</i>",
                parse_mode="HTML",
            )
            logging.info(f"Failed to extract text from image. Error: {e}")
        else:
            msg = await query.message.edit_text(
                text=f"üî∏  –í–ê–® –¢–ï–ö–°–¢ üî∏\n\n{extracted_text}",
                reply_markup=action_after_loading_keyboard,
            )
            chat_id = msg.chat.id
            await pg_manager.save_query(user_id, extracted_text, chat_id)
    else:
        await query.message.edit_text(
            text="<i>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ . . .</i>",
            parse_mode="HTML",
        )
        logging.info(f"Something went wrong when a user {user_id} submitted an image")
